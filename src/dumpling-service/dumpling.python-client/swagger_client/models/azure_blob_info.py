# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AzureBlobInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AzureBlobInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'size': 'int',
            'content_type': 'str',
            'location': 'str'
        }

        self.attribute_map = {
            'name': 'Name',
            'size': 'Size',
            'content_type': 'ContentType',
            'location': 'Location'
        }

        self._name = None
        self._size = None
        self._content_type = None
        self._location = None

    @property
    def name(self):
        """
        Gets the name of this AzureBlobInfo.
        The name without path of the file stored in the blob store.

        :return: The name of this AzureBlobInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AzureBlobInfo.
        The name without path of the file stored in the blob store.

        :param name: The name of this AzureBlobInfo.
        :type: str
        """
        self._name = name

    @property
    def size(self):
        """
        Gets the size of this AzureBlobInfo.
        The size of the blob.

        :return: The size of this AzureBlobInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this AzureBlobInfo.
        The size of the blob.

        :param size: The size of this AzureBlobInfo.
        :type: int
        """
        self._size = size

    @property
    def content_type(self):
        """
        Gets the content_type of this AzureBlobInfo.
        The content type of the blob.

        :return: The content_type of this AzureBlobInfo.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this AzureBlobInfo.
        The content type of the blob.

        :param content_type: The content_type of this AzureBlobInfo.
        :type: str
        """
        self._content_type = content_type

    @property
    def location(self):
        """
        Gets the location of this AzureBlobInfo.
        The absolute URI by which the blob can be retrieved from the store.

        :return: The location of this AzureBlobInfo.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this AzureBlobInfo.
        The absolute URI by which the blob can be retrieved from the store.

        :param location: The location of this AzureBlobInfo.
        :type: str
        """
        self._location = location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

